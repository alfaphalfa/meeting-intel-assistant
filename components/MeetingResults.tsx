"use client";

import { useState } from "react";
import {
  CheckCircle2,
  ClipboardList,
  HelpCircle,
  AlertTriangle,
  ArrowRight,
  ChevronDown,
  ChevronUp,
  User,
  Calendar,
  Download,
} from "lucide-react";

interface ActionItem {
  task: string;
  owner: string;
  deadline?: string;
}

interface RiskFlag {
  type: string;
  description: string;
  severity: "low" | "medium" | "high";
}

interface AnalysisResult {
  keyDecisions: string[];
  actionItems: ActionItem[];
  openQuestions: string[];
  riskFlags: RiskFlag[];
  nextSteps: string[];
}

interface MeetingResultsProps {
  results: AnalysisResult;
}

export default function MeetingResults({ results }: MeetingResultsProps) {
  const [expandedSections, setExpandedSections] = useState({
    decisions: true,
    actions: true,
    questions: true,
    risks: true,
    nextSteps: true,
  });

  const toggleSection = (section: keyof typeof expandedSections) => {
    setExpandedSections((prev) => ({
      ...prev,
      [section]: !prev[section],
    }));
  };

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case "high":
        return "bg-red-500/20 text-red-400 border-red-500/50";
      case "medium":
        return "bg-yellow-500/20 text-yellow-400 border-yellow-500/50";
      case "low":
        return "bg-blue-500/20 text-blue-400 border-blue-500/50";
      default:
        return "bg-gray-500/20 text-gray-400 border-gray-500/50";
    }
  };

  const getSeverityBadgeColor = (severity: string) => {
    switch (severity) {
      case "high":
        return "bg-red-500 text-white";
      case "medium":
        return "bg-yellow-500 text-black";
      case "low":
        return "bg-blue-500 text-white";
      default:
        return "bg-gray-500 text-white";
    }
  };

  const exportToMarkdown = () => {
    const timestamp = new Date().toLocaleString("en-US", {
      dateStyle: "full",
      timeStyle: "short",
    });
    const fileTimestamp = new Date()
      .toISOString()
      .replace(/[:.]/g, "-")
      .slice(0, -5);

    let markdown = `# Meeting Analysis\n\n`;
    markdown += `**Generated:** ${timestamp}\n\n`;
    markdown += `---\n\n`;

    // Key Decisions
    markdown += `## Key Decisions\n\n`;
    if (results.keyDecisions.length > 0) {
      results.keyDecisions.forEach((decision) => {
        markdown += `- ${decision}\n`;
      });
    } else {
      markdown += `*No decisions identified*\n`;
    }
    markdown += `\n`;

    // Action Items
    markdown += `## Action Items\n\n`;
    if (results.actionItems.length > 0) {
      results.actionItems.forEach((item) => {
        markdown += `- [ ] **${item.task}**\n`;
        markdown += `  - Owner: ${item.owner}\n`;
        if (item.deadline) {
          markdown += `  - Deadline: ${item.deadline}\n`;
        }
        markdown += `\n`;
      });
    } else {
      markdown += `*No action items identified*\n\n`;
    }

    // Open Questions
    markdown += `## Open Questions\n\n`;
    if (results.openQuestions.length > 0) {
      results.openQuestions.forEach((question) => {
        markdown += `- ${question}\n`;
      });
    } else {
      markdown += `*No open questions identified*\n`;
    }
    markdown += `\n`;

    // Risk Flags
    markdown += `## Risk Flags\n\n`;
    if (results.riskFlags.length > 0) {
      results.riskFlags.forEach((risk) => {
        const emoji =
          risk.severity === "high"
            ? "ðŸ”´"
            : risk.severity === "medium"
            ? "ðŸŸ¡"
            : "ðŸ”µ";
        markdown += `${emoji} **${risk.severity.toUpperCase()}**: ${risk.type}\n`;
        markdown += `  - ${risk.description}\n\n`;
      });
    } else {
      markdown += `*No risks identified*\n\n`;
    }

    // Next Steps
    markdown += `## Next Steps\n\n`;
    if (results.nextSteps.length > 0) {
      results.nextSteps.forEach((step) => {
        markdown += `- ${step}\n`;
      });
    } else {
      markdown += `*No next steps identified*\n`;
    }
    markdown += `\n`;

    // Footer
    markdown += `---\n\n`;
    markdown += `*Generated by Meeting Intelligence Assistant*\n`;

    // Create and download file
    const blob = new Blob([markdown], { type: "text/markdown" });
    const url = URL.createObjectURL(blob);
    const link = document.createElement("a");
    link.href = url;
    link.download = `meeting-analysis-${fileTimestamp}.md`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  };

  return (
    <div className="space-y-6 animate-fade-in">
      {/* Export Button */}
      <div className="flex justify-end">
        <button
          onClick={exportToMarkdown}
          className="flex items-center gap-2 px-6 py-3 bg-netflix-red hover:bg-netflix-red/90 text-white font-semibold rounded-xl transition-all duration-200 hover:scale-105 shadow-lg hover:shadow-netflix-red/50"
        >
          <Download className="w-5 h-5" />
          Export Analysis
        </button>
      </div>

      {/* Overview Card */}
      <div className="bg-netflix-black border border-netflix-gray/30 rounded-lg p-6 hover:border-netflix-gray/50 transition-all duration-300">
        <div className="flex items-center justify-between mb-6">
          <h2 className="text-2xl font-bold text-white">Analysis Overview</h2>
        </div>
        <div className="grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-5 gap-4">
          <div className="bg-green-500/10 border border-green-500/30 rounded-lg p-4 hover:bg-green-500/15 hover:scale-105 transition-all duration-200 cursor-default">
            <div className="flex items-center gap-2 mb-2">
              <CheckCircle2 className="w-5 h-5 text-green-400" />
              <span className="text-sm text-green-400 font-medium">
                Decisions
              </span>
            </div>
            <p className="text-2xl font-bold text-white">
              {results.keyDecisions.length}
            </p>
          </div>

          <div className="bg-blue-500/10 border border-blue-500/30 rounded-lg p-4 hover:bg-blue-500/15 hover:scale-105 transition-all duration-200 cursor-default">
            <div className="flex items-center gap-2 mb-2">
              <ClipboardList className="w-5 h-5 text-blue-400" />
              <span className="text-sm text-blue-400 font-medium">Actions</span>
            </div>
            <p className="text-2xl font-bold text-white">
              {results.actionItems.length}
            </p>
          </div>

          <div className="bg-orange-500/10 border border-orange-500/30 rounded-lg p-4 hover:bg-orange-500/15 hover:scale-105 transition-all duration-200 cursor-default">
            <div className="flex items-center gap-2 mb-2">
              <HelpCircle className="w-5 h-5 text-orange-400" />
              <span className="text-sm text-orange-400 font-medium">
                Questions
              </span>
            </div>
            <p className="text-2xl font-bold text-white">
              {results.openQuestions.length}
            </p>
          </div>

          <div className="bg-red-500/10 border border-red-500/30 rounded-lg p-4 hover:bg-red-500/15 hover:scale-105 transition-all duration-200 cursor-default">
            <div className="flex items-center gap-2 mb-2">
              <AlertTriangle className="w-5 h-5 text-red-400" />
              <span className="text-sm text-red-400 font-medium">Risks</span>
            </div>
            <p className="text-2xl font-bold text-white">
              {results.riskFlags.length}
            </p>
          </div>

          <div className="bg-purple-500/10 border border-purple-500/30 rounded-lg p-4 col-span-2 sm:col-span-3 lg:col-span-1 hover:bg-purple-500/15 hover:scale-105 transition-all duration-200 cursor-default">
            <div className="flex items-center gap-2 mb-2">
              <ArrowRight className="w-5 h-5 text-purple-400" />
              <span className="text-sm text-purple-400 font-medium">
                Next Steps
              </span>
            </div>
            <p className="text-2xl font-bold text-white">
              {results.nextSteps.length}
            </p>
          </div>
        </div>
      </div>

      {/* Key Decisions */}
      <div className="bg-netflix-black border border-netflix-gray/30 rounded-lg overflow-hidden hover:border-netflix-gray/50 transition-all duration-300">
        <button
          onClick={() => toggleSection("decisions")}
          className="w-full flex items-center justify-between p-6 hover:bg-netflix-gray/10 transition-all duration-200"
        >
          <div className="flex items-center gap-3">
            <CheckCircle2 className="w-6 h-6 text-green-400" />
            <h2 className="text-xl font-bold text-white">Key Decisions</h2>
            <span className="text-sm text-netflix-gray">
              ({results.keyDecisions.length})
            </span>
          </div>
          {expandedSections.decisions ? (
            <ChevronUp className="w-5 h-5 text-netflix-gray" />
          ) : (
            <ChevronDown className="w-5 h-5 text-netflix-gray" />
          )}
        </button>

        {expandedSections.decisions && (
          <div className="px-6 pb-6 border-t border-netflix-gray/30">
            {results.keyDecisions.length > 0 ? (
              <ul className="space-y-3 mt-4">
                {results.keyDecisions.map((decision, index) => (
                  <li
                    key={index}
                    className="flex items-start gap-3 bg-green-500/5 border border-green-500/20 rounded-lg p-4"
                  >
                    <CheckCircle2 className="w-5 h-5 text-green-400 mt-0.5 flex-shrink-0" />
                    <span className="text-white">{decision}</span>
                  </li>
                ))}
              </ul>
            ) : (
              <p className="text-netflix-gray mt-4">No decisions identified</p>
            )}
          </div>
        )}
      </div>

      {/* Action Items */}
      <div className="bg-netflix-black border border-netflix-gray/30 rounded-lg overflow-hidden">
        <button
          onClick={() => toggleSection("actions")}
          className="w-full flex items-center justify-between p-6 hover:bg-netflix-gray/10 transition-colors"
        >
          <div className="flex items-center gap-3">
            <ClipboardList className="w-6 h-6 text-blue-400" />
            <h2 className="text-xl font-bold text-white">Action Items</h2>
            <span className="text-sm text-netflix-gray">
              ({results.actionItems.length})
            </span>
          </div>
          {expandedSections.actions ? (
            <ChevronUp className="w-5 h-5 text-netflix-gray" />
          ) : (
            <ChevronDown className="w-5 h-5 text-netflix-gray" />
          )}
        </button>

        {expandedSections.actions && (
          <div className="px-6 pb-6 border-t border-netflix-gray/30">
            {results.actionItems.length > 0 ? (
              <div className="space-y-3 mt-4">
                {results.actionItems.map((item, index) => (
                  <div
                    key={index}
                    className="bg-blue-500/5 border border-blue-500/20 rounded-lg p-4"
                  >
                    <div className="flex items-start gap-3">
                      <ClipboardList className="w-5 h-5 text-blue-400 mt-0.5 flex-shrink-0" />
                      <div className="flex-1">
                        <p className="text-white font-medium">{item.task}</p>
                        <div className="mt-3 flex flex-wrap gap-2">
                          <span className="inline-flex items-center gap-1.5 px-3 py-1 bg-blue-500/20 border border-blue-500/30 rounded-full text-sm text-blue-400">
                            <User className="w-3.5 h-3.5" />
                            {item.owner}
                          </span>
                          {item.deadline && (
                            <span className="inline-flex items-center gap-1.5 px-3 py-1 bg-purple-500/20 border border-purple-500/30 rounded-full text-sm text-purple-400">
                              <Calendar className="w-3.5 h-3.5" />
                              {item.deadline}
                            </span>
                          )}
                        </div>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            ) : (
              <p className="text-netflix-gray mt-4">No action items identified</p>
            )}
          </div>
        )}
      </div>

      {/* Open Questions */}
      <div className="bg-netflix-black border border-netflix-gray/30 rounded-lg overflow-hidden">
        <button
          onClick={() => toggleSection("questions")}
          className="w-full flex items-center justify-between p-6 hover:bg-netflix-gray/10 transition-colors"
        >
          <div className="flex items-center gap-3">
            <HelpCircle className="w-6 h-6 text-orange-400" />
            <h2 className="text-xl font-bold text-white">Open Questions</h2>
            <span className="text-sm text-netflix-gray">
              ({results.openQuestions.length})
            </span>
          </div>
          {expandedSections.questions ? (
            <ChevronUp className="w-5 h-5 text-netflix-gray" />
          ) : (
            <ChevronDown className="w-5 h-5 text-netflix-gray" />
          )}
        </button>

        {expandedSections.questions && (
          <div className="px-6 pb-6 border-t border-netflix-gray/30">
            {results.openQuestions.length > 0 ? (
              <ul className="space-y-3 mt-4">
                {results.openQuestions.map((question, index) => (
                  <li
                    key={index}
                    className="flex items-start gap-3 bg-orange-500/5 border border-orange-500/20 rounded-lg p-4"
                  >
                    <HelpCircle className="w-5 h-5 text-orange-400 mt-0.5 flex-shrink-0" />
                    <span className="text-white">{question}</span>
                  </li>
                ))}
              </ul>
            ) : (
              <p className="text-netflix-gray mt-4">
                No open questions identified
              </p>
            )}
          </div>
        )}
      </div>

      {/* Risk Flags */}
      <div className="bg-netflix-black border border-netflix-gray/30 rounded-lg overflow-hidden">
        <button
          onClick={() => toggleSection("risks")}
          className="w-full flex items-center justify-between p-6 hover:bg-netflix-gray/10 transition-colors"
        >
          <div className="flex items-center gap-3">
            <AlertTriangle className="w-6 h-6 text-red-400" />
            <h2 className="text-xl font-bold text-white">Risk Flags</h2>
            <span className="text-sm text-netflix-gray">
              ({results.riskFlags.length})
            </span>
          </div>
          {expandedSections.risks ? (
            <ChevronUp className="w-5 h-5 text-netflix-gray" />
          ) : (
            <ChevronDown className="w-5 h-5 text-netflix-gray" />
          )}
        </button>

        {expandedSections.risks && (
          <div className="px-6 pb-6 border-t border-netflix-gray/30">
            {results.riskFlags.length > 0 ? (
              <div className="space-y-3 mt-4">
                {results.riskFlags.map((risk, index) => (
                  <div
                    key={index}
                    className={`border rounded-lg p-4 ${getSeverityColor(
                      risk.severity
                    )}`}
                  >
                    <div className="flex items-start gap-3">
                      <AlertTriangle className="w-5 h-5 flex-shrink-0 mt-0.5" />
                      <div className="flex-1">
                        <div className="flex items-start justify-between gap-3 mb-2">
                          <p className="font-semibold">{risk.type}</p>
                          <span
                            className={`text-xs uppercase font-bold px-2 py-1 rounded ${getSeverityBadgeColor(
                              risk.severity
                            )}`}
                          >
                            {risk.severity}
                          </span>
                        </div>
                        <p className="text-sm opacity-90">{risk.description}</p>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            ) : (
              <p className="text-netflix-gray mt-4">No risks identified</p>
            )}
          </div>
        )}
      </div>

      {/* Next Steps */}
      <div className="bg-netflix-black border border-netflix-gray/30 rounded-lg overflow-hidden">
        <button
          onClick={() => toggleSection("nextSteps")}
          className="w-full flex items-center justify-between p-6 hover:bg-netflix-gray/10 transition-colors"
        >
          <div className="flex items-center gap-3">
            <ArrowRight className="w-6 h-6 text-purple-400" />
            <h2 className="text-xl font-bold text-white">Next Steps</h2>
            <span className="text-sm text-netflix-gray">
              ({results.nextSteps.length})
            </span>
          </div>
          {expandedSections.nextSteps ? (
            <ChevronUp className="w-5 h-5 text-netflix-gray" />
          ) : (
            <ChevronDown className="w-5 h-5 text-netflix-gray" />
          )}
        </button>

        {expandedSections.nextSteps && (
          <div className="px-6 pb-6 border-t border-netflix-gray/30">
            {results.nextSteps.length > 0 ? (
              <ul className="space-y-3 mt-4">
                {results.nextSteps.map((step, index) => (
                  <li
                    key={index}
                    className="flex items-start gap-3 bg-purple-500/5 border border-purple-500/20 rounded-lg p-4"
                  >
                    <ArrowRight className="w-5 h-5 text-purple-400 mt-0.5 flex-shrink-0" />
                    <span className="text-white">{step}</span>
                  </li>
                ))}
              </ul>
            ) : (
              <p className="text-netflix-gray mt-4">No next steps identified</p>
            )}
          </div>
        )}
      </div>
    </div>
  );
}
